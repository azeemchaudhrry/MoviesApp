// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using FFImageLoading;
using Foundation;
using MovieApp.Core;
using MovieApp.iOS.CollectionViewExtensions;
using MovieApp.iOS.Extensions;
using MovieApp.iOS.Utils;
using MovieApp.iOS.Views.Cells;
using MvvmCross.Base;
using MvvmCross.Binding.BindingContext;
using MvvmCross.Binding.Extensions;
using MvvmCross.Platforms.Ios.Binding.Views;
using MvvmCross.Platforms.Ios.Presenters.Attributes;
using MvvmCross.Platforms.Ios.Views;
using UIKit;

namespace MovieApp.iOS
{
    [MvxFromStoryboard("Main")]
    [MvxChildPresentation(Animated = true)]
    public partial class MovieDetailsView : MvxViewController<MovieDetailsViewModel>
    {
        public MovieDetailsView(IntPtr handle) : base(handle)
        {
        }

        public MovieDetailsView()
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            ImageService
                .Instance
                .LoadUrl(ViewModel.MovieDetails.PosterUrl)
                .Into(posterImageView);

            tagsCollectionView.RegisterNibForCell(GenreCollectionCell.Nib, GenreCollectionCell.Key);
            var source = new GenreCollectionViewFlowLayoutSource(tagsCollectionView, GenreCollectionCell.Key);
            tagsCollectionView.Delegate = source;
            tagsCollectionView.Source = source;

            var set = this.CreateBindingSet<MovieDetailsView, MovieDetailsViewModel>();
            set.Bind(titleLabel).For(p => p.Text).To(vm => vm.MovieDetails.Title);
            set.Bind(releaseDateLabel).For(p => p.Text).To(vm => vm.MovieDetails.ReleaseDate);
            set.Bind(ratingLabel).For(p => p.Text).To(vm => vm.MovieDetails.VoteAverage);
            votesLabel.Text = $" - {ViewModel.MovieDetails.VoteCount} Votes";
            set.Bind(overviewLabel).For(p => p.Text).To(vm => vm.MovieDetails.Overview);

            set.Bind(source).For(p => p.ItemsSource).To(vm => vm.MovieDetails.Genres);

            //Review view bindings
            set.Bind(reviewTitleLabel).For(p => p.Text).To(vm => vm.CurrentMovieReview.Title);
            set.Bind(reviewRatingView).For(p => p.Text).To(vm => vm.CurrentMovieReview.Rating);
            set.Bind(reviewDetailsTextView).For(p => p.Text).To(vm => vm.CurrentMovieReview.Review);
            set.Apply();

            scrollView.ContentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentBehavior.Never;

            if (ViewModel.CurrentMovieReview != null)
            {
                reviewView.Hidden = false;
                AddAttachment();
            }
            else
            {
                reviewView.Hidden = true;
            }

            UpdateFavoriteStatus();

            writeReviewButton.BackgroundColor = UIColorUtils.GetAppThemeColor();
            writeReviewButton.Layer.CornerRadius = 10;
            writeReviewButton.Layer.MasksToBounds = true;

            attachmentImageView.Layer.CornerRadius = attachmentImageView.Frame.Height / 3;
            attachmentImageView.Layer.MasksToBounds = true;

            UpdateFonts();

            ViewModel.PropertyChanged += ViewModel_PropertyChanged;
        }

        private void ViewModel_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
        {
            if (e.PropertyName.Equals(nameof(ViewModel.CurrentMovieReview)))
            {
                reviewView.Hidden = false;
                AddAttachment();
            }
        }

        private void AddAttachment()
        {
            if (ViewModel.CurrentMovieReview.Attachment != null)
            {
                attachmentImageView.Image = UIImage.LoadFromData(NSData.FromArray(ViewModel.CurrentMovieReview.Attachment));
            }
        }

        partial void favoriteButtonTapped(NSObject sender)
        {
            ViewModel.MovieDetails.IsFavorite = !ViewModel.MovieDetails.IsFavorite;
            ViewModel.AddToFavoritesCommand.Execute(ViewModel.MovieDetails);
            UpdateFavoriteStatus();
        }

        private void UpdateFavoriteStatus()
        {
            if (ViewModel.MovieDetails.IsFavorite)
            {
                favoriteImageView.Image = UIImage.FromBundle("favorite-filled").ImageWithRenderingMode(UIImageRenderingMode.AlwaysTemplate);
                favoriteImageView.TintColor = UIColor.Red;
            }
            else
            {
                favoriteImageView.Image = UIImage.FromBundle("favorite-gray").ImageWithRenderingMode(UIImageRenderingMode.AlwaysTemplate);
                favoriteImageView.TintColor = UIColorUtils.GetAppTextLightColor();
            }
        }

        partial void backButtonTapped(Foundation.NSObject sender)
        {
            ViewModel.CloseCommand.Execute();
        }

        partial void writeReviewBtnTapped(Foundation.NSObject sender)
        {
            ViewModel.ReviewCommand.Execute();
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            //NavigationController.NavigationBarHidden = false;
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);
            // NavigationController.NavigationBarHidden = true;
        }

        private void AddMovieToFavoriteItem(object sender, EventArgs e)
        {

        }

        private void CloseCurrent(object sender, EventArgs e)
        {

        }

        private void UpdateFonts()
        {
            releaseDateLabel.Font = FontUtils.GetNormalFont(14);
            votesLabel.Font = FontUtils.GetNormalFont(14);
            ratingLabel.Font = FontUtils.GetNormalFont(14);

            titleLabel.Font = FontUtils.GetBoldFont(30);
            overviewLabel.Font = FontUtils.GetNormalFont(14);

            writeReviewButton.Font = FontUtils.GetNormalFont(14);

            reviewTitleLabel.Font = FontUtils.GetBoldFont(15);
            reviewRatingView.Font = FontUtils.GetNormalFont(15);
            reviewDetailsTextView.Font = FontUtils.GetNormalFont(14);
        }
    }
}
